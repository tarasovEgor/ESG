"""empty message

Revision ID: cf997157f3c9
Revises: fdf4c2482f38
Create Date: 2023-03-17 13:06:23.461341

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "cf997157f3c9"
down_revision = "fdf4c2482f38"
branch_labels = None
depends_on = None

text_result_agg = sa.Table(
    "aggregate_table_model_result",
    sa.MetaData(),
    sa.Column("id", sa.Integer()),
    sa.Column("year", sa.Integer()),
    sa.Column("quater", sa.Integer()),
    sa.Column("model_name", sa.String()),
    sa.Column("source_site", sa.String()),
    sa.Column("source_type", sa.String()),
    sa.Column("bank_name", sa.String()),
    sa.Column("bank_id", sa.Integer()),
    sa.Column("neutral", sa.Integer()),
    sa.Column("positive", sa.Integer()),
    sa.Column("negative", sa.Integer()),
    sa.Column("total", sa.Integer()),
    sa.Column("index_base", sa.Float()),
    sa.Column("index_mean", sa.Float()),
    sa.Column("index_std", sa.Float()),
    sa.Column("index_safe", sa.Float()),
    sa.Column("index_base_10_percentile", sa.Float()),
    sa.Column("index_base_90_percentile", sa.Float()),
    sa.Column("index_mean_10_percentile", sa.Float()),
    sa.Column("index_mean_90_percentile", sa.Float()),
    sa.Column("index_std_10_percentile", sa.Float()),
    sa.Column("index_std_90_percentile", sa.Float()),
    sa.Column("index_safe_10_percentile", sa.Float()),
    sa.Column("index_safe_90_percentile", sa.Float()),
)


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("aggregate_table_model_result", sa.Column("index_base_10_percentile", sa.Float(), nullable=True))
    op.add_column("aggregate_table_model_result", sa.Column("index_base_90_percentile", sa.Float(), nullable=True))
    op.add_column("aggregate_table_model_result", sa.Column("index_mean_10_percentile", sa.Float(), nullable=True))
    op.add_column("aggregate_table_model_result", sa.Column("index_mean_90_percentile", sa.Float(), nullable=True))
    op.add_column("aggregate_table_model_result", sa.Column("index_std_10_percentile", sa.Float(), nullable=True))
    op.add_column("aggregate_table_model_result", sa.Column("index_std_90_percentile", sa.Float(), nullable=True))
    op.add_column("aggregate_table_model_result", sa.Column("index_safe_10_percentile", sa.Float(), nullable=True))
    op.add_column("aggregate_table_model_result", sa.Column("index_safe_90_percentile", sa.Float(), nullable=True))
    # ### end Alembic commands ###
    base_1 = "base_1"
    base_9 = "base_9"
    mean_1 = "mean_1"
    mean_9 = "mean_9"
    safe_1 = "safe_1"
    safe_9 = "safe_9"
    std_1 = "std_1"
    std_9 = "std_9"
    p_year = "p_year"
    p_quarter = "p_quarter"

    percentiles_query = sa.select(
        sa.func.percentile_disc(0.1).within_group(text_result_agg.c.index_base).label(base_1),  # type: ignore[no-untyped-call]
        sa.func.percentile_disc(0.9).within_group(text_result_agg.c.index_base).label(base_9),  # type: ignore[no-untyped-call]
        sa.func.percentile_disc(0.1).within_group(text_result_agg.c.index_mean).label(mean_1),  # type: ignore[no-untyped-call]
        sa.func.percentile_disc(0.9).within_group(text_result_agg.c.index_mean).label(mean_9),  # type: ignore[no-untyped-call]
        sa.func.percentile_disc(0.1).within_group(text_result_agg.c.index_std).label(std_1),  # type: ignore[no-untyped-call]
        sa.func.percentile_disc(0.9).within_group(text_result_agg.c.index_std).label(std_9),  # type: ignore[no-untyped-call]
        sa.func.percentile_disc(0.1).within_group(text_result_agg.c.index_safe).label(safe_1),  # type: ignore[no-untyped-call]
        sa.func.percentile_disc(0.9).within_group(text_result_agg.c.index_safe).label(safe_9),  # type: ignore[no-untyped-call]
        text_result_agg.c.year.label(p_year),
        text_result_agg.c.quater.label(p_quarter),
    ).group_by(text_result_agg.c.year, text_result_agg.c.quater)
    query = percentiles_query.subquery()
    op.execute(
        sa.update(text_result_agg)
        .where(text_result_agg.c.year == query.c.p_year)
        .where(text_result_agg.c.quater == query.c.p_quarter)
        .values(
            index_base_10_percentile=query.c.base_1,
            index_base_90_percentile=query.c.base_9,
            index_mean_10_percentile=query.c.mean_1,
            index_mean_90_percentile=query.c.mean_9,
            index_std_10_percentile=query.c.std_1,
            index_std_90_percentile=query.c.std_9,
            index_safe_10_percentile=query.c.safe_1,
            index_safe_90_percentile=query.c.safe_9,
        )
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("aggregate_table_model_result", "index_safe_90_percentile")
    op.drop_column("aggregate_table_model_result", "index_safe_10_percentile")
    op.drop_column("aggregate_table_model_result", "index_std_90_percentile")
    op.drop_column("aggregate_table_model_result", "index_std_10_percentile")
    op.drop_column("aggregate_table_model_result", "index_mean_90_percentile")
    op.drop_column("aggregate_table_model_result", "index_mean_10_percentile")
    op.drop_column("aggregate_table_model_result", "index_base_90_percentile")
    op.drop_column("aggregate_table_model_result", "index_base_10_percentile")
    # ### end Alembic commands ###
